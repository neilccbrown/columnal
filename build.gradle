import java.time.Duration

plugins {
  id 'org.checkerframework' version '0.6.17' apply false
  id 'org.openjfx.javafxplugin' version '0.0.10' apply false
  //id "com.github.spotbugs" version "5.0.12" apply false
  id "com.github.ben-manes.versions" version "0.42.0"
}

// We configure this here because it determines JavaFX modules and stubs:
def projectsToJavaFX = [
  app: ['javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.web'],
  data: ['javafx.base', 'javafx.graphics'],
  expressions: ['javafx.graphics'],
  'utility-gui': ['javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.web'],
  identifiers: ['javafx.graphics'],
  'lex-editor': ['javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.web'],
  'lex-editor-completion': ['javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.web'],
  stf: ['javafx.base', 'javafx.controls', 'javafx.graphics'],
  transformations:  ['javafx.base', 'javafx.controls', 'javafx.graphics'],
  types: ['javafx.graphics'],
  utility:  ['javafx.base', 'javafx.graphics'],
  'utility-error':  ['javafx.base', 'javafx.graphics']
]

def allSubprojects = subprojects

subprojects { subproject ->
  if (!subproject.name.startsWith("ann") && !subproject.name.contains("checker") && !subproject.name.contains("tests") && !subproject.name.equals("xml")) {
    apply plugin: 'java-library'
    apply plugin: 'org.checkerframework'
    apply plugin: 'org.openjfx.javafxplugin'
    if (!subproject.name.equals("parsers")) {
      apply plugin: 'checkstyle'

      checkstyle {
        toolVersion = "10.3.3"
      }
      tasks.withType(Checkstyle) {
        exclude "**/module-info.java"
        exclude "build/**/*"
      }

      // Annoying at the moment because spotbugs gets confused by thinking
      // A<@Nullable B> means A is nullable.
      // Possibly related to this bug: https://github.com/spotbugs/spotbugs/issues/616
      //apply plugin: 'com.github.spotbugs'
    }

    def stubs = ["JavaGeneral", "Values"]
    stubs += projectsToJavaFX.getOrDefault(subproject.name, [])
    
    checkerFramework {
      checkers = [
              'org.checkerframework.checker.nullness.NullnessChecker'
      ] + ("all".equals(project.findProperty("checkers")) ? [         
              'org.checkerframework.checker.optional.OptionalChecker',
              'org.checkerframework.checker.units.UnitsChecker',
              'org.checkerframework.checker.i18n.I18nChecker',
              'annotation.ValueTypeChecker',
              'annotation.userindex.UserIndexChecker',
              'annotation.help.HelpFileChecker',
              'annotation.funcdoc.FuncDocChecker',
              'annotation.recorded.RecordedChecker'
      ] : [])
      extraJavacArgs = [
          //'-AskipDefs=records.grammar.|one.util.',
          "-Astubs=" + stubs.collect{s -> return "$rootDir" + File.separator + "stubs" + File.separator + s + ".astub"}.findAll {s -> return new File(s).exists()}.join(File.pathSeparator),
          '-AsuppressWarnings=optional.parameter,optional.as.element.type,optional.collection'
      ] + ("all".equals(project.findProperty("checkers")) ? [
          '-Aunits=annotation.units.AbsColIndex,annotation.units.AbsRowIndex,annotation.units.GridAreaColIndex,annotation.units.GridAreaRowIndex,annotation.units.TableDataRowIndex,annotation.units.TableDataColIndex,annotation.units.RowOrColIndex,annotation.units.CanonicalLocation,annotation.units.DisplayLocation,annotation.units.RawInputLocation,annotation.units.DisplayPixels,annotation.units.VirtualPixels',
          "-Apropfiles=" + ["$rootDir/app/src/main/resources/transformations_en.properties","$rootDir/app/src/main/resources/expression_en.properties","$rootDir/app/src/main/resources/function_en.properties","$rootDir/app/src/main/resources/newcolumn_en.properties","$rootDir/app/src/main/resources/dataentry_en.properties","$rootDir/app/src/main/resources/main_en.properties","$rootDir/app/src/main/resources/import_en.properties"].join(File.pathSeparator),
          "-Ahelpfiles=$rootDir/xml/src/main/help/agg-recipe.xml;$rootDir/xml/src/main/help/edit-settings.xml;$rootDir/xml/src/main/help/guess-format.xml;$rootDir/xml/src/main/help/edit-check.xml;$rootDir/xml/src/main/help/edit-column.xml;$rootDir/xml/src/main/help/edit-join.xml;$rootDir/xml/src/main/help/edit-r.xml;$rootDir/xml/src/main/help/edit-unit.xml;$rootDir/xml/src/main/help/split-by.xml",
          "-Afuncdocfiles=$rootDir/xml/src/main/funcdoc/boolean.xml;$rootDir/xml/src/main/funcdoc/comparison.xml;$rootDir/xml/src/main/funcdoc/conversion.xml;$rootDir/xml/src/main/funcdoc/core.xml;$rootDir/xml/src/main/funcdoc/datetime.xml;$rootDir/xml/src/main/funcdoc/list.xml;$rootDir/xml/src/main/funcdoc/listprocess.xml;$rootDir/xml/src/main/funcdoc/literals.xml;$rootDir/xml/src/main/funcdoc/lookup.xml;$rootDir/xml/src/main/funcdoc/math.xml;$rootDir/xml/src/main/funcdoc/number.xml;$rootDir/xml/src/main/funcdoc/operators.xml;$rootDir/xml/src/main/funcdoc/optional.xml;$rootDir/xml/src/main/funcdoc/text.xml",
      ] : []) + ("true".equals(project.findProperty("threadCheck")) ? ['-Xplugin:threadchecker.plugin.TCPlugin'] : [])
    }
    javafx {
      version = "13.0.2"
      modules = projectsToJavaFX.getOrDefault(subproject.name, [])
    }

    dependencies {
      checkerFramework libs.checkerframework
      implementation libs.checkerframework.qual
      
      annotationProcessor project(':anns')
      compileOnly project(':anns')
      annotationProcessor project(':anns-threadchecker')
      compileOnly project(':anns-threadchecker')
      annotationProcessor project(':checkers')
      compileOnly project(':checkers')
      annotationProcessor project(':threadchecker')
      compileOnly project(':threadchecker')

      testAnnotationProcessor project(':anns')
      testCompileOnly project(':anns')
      testAnnotationProcessor project(':anns-threadchecker')
      testCompileOnly project(':anns-threadchecker')
      testAnnotationProcessor project(':threadchecker')
      testCompileOnly project(':threadchecker')
    }
    build.dependsOn ':xml:build'

    sourceCompatibility = 17
    targetCompatibility = 17
  }
  else if (subproject.name.contains("tests")) {
    apply plugin: 'java-library'
    apply plugin: 'org.openjfx.javafxplugin'
    apply plugin: 'java-test-fixtures'
    dependencies {
      testImplementation libs.checkerframework.qual
      testImplementation libs.hamcrest
      testImplementation libs.bundles.junitWithQuickcheck
      testAnnotationProcessor project(':anns')
      testAnnotationProcessor project(':anns-threadchecker')
      testAnnotationProcessor project(':threadchecker')
      testCompileOnly project(':anns')
      testCompileOnly project(':anns-threadchecker')
      testCompileOnly project(':threadchecker')

      testFixturesImplementation libs.checkerframework.qual
      testFixturesImplementation libs.hamcrest
      testFixturesImplementation libs.bundles.junitWithQuickcheck
      testFixturesAnnotationProcessor project(':anns')
      testFixturesAnnotationProcessor project(':anns-threadchecker')
      testFixturesAnnotationProcessor project(':threadchecker')
      testFixturesCompileOnly project(':anns')
      testFixturesCompileOnly project(':anns-threadchecker')
      testFixturesCompileOnly project(':threadchecker')
      
      testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2'
    }

    tasks.withType(JavaCompile) {
      options.compilerArgs += ("true".equals(project.findProperty("threadCheck")) ? ['-Xplugin:threadchecker.plugin.TCPlugin'] : [])
    }

    test {
      useJUnit()

      scanForTestClasses = false
      filter {
        includeTestsMatching "Test*"
        includeTestsMatching "Prop*"
        // Don't want inner classes to be scanned:
        excludeTestsMatching "*\$*"
      }
      
      // This stops failing tests tripping others up, and generally
      // helps keep the GUI tests isolated:
      forkEvery = 1
      
      jvmArgs += ['-Xmx2G',
                  '-XX:+HeapDumpOnOutOfMemoryError',
                  '-XX:+UseCompressedOops',
                  "-Dlog4j.configurationFile=$rootDir/tests-gui-central/src/test/resources/log4j2-test.xml",
                  '--enable-preview'] +
                  // Headless is the default because headed GUI tests are quite a surprise and cause havoc:
                  (("true".equals(project.findProperty("headless")) || project.findProperty("headless") == null) ? [
                    // Headless:
                    '-Djava.awt.headless=true',
                    '-Dtestfx.robot=glass',
                    '-Dtestfx.headless=true',
                    '-Dprism.order=sw',
                    '-Dprism.text=t2k',
                    '-Dglass.platform=Monocle',
                    '-Dmonocle.platform=Headless',
                    '-Dheadless.geometry=1920x1200-32'] : [
                    // Headed:
                    '-Dtestfx.robot=glass',
                    '-Dprism.text=t2k',
                  ])

      // If it goes beyond this in normal execution, we should split the module(s) up further:
      timeout = Duration.ofMinutes(40)
      
      int index = allSubprojects.findAll{p -> p.name.contains("tests-gui")}.collect {p -> p.name}.sort().indexOf(subproject.name) - 1

      if ("true".equals(project.findProperty("xvfb"))) {
        environment "DISPLAY", ":42." + index
      }
      
      Process enlightenment = null;
      
      doFirst {
        if ("true".equals(project.findProperty("xvfb"))) {
          ProcessBuilder pb = new ProcessBuilder("enlightenment_start").inheritIO()
          pb.environment().put("DISPLAY", ":42." + index)
          enlightenment = pb.start()
          sleep(5000)
          if (!enlightenment.isAlive())
            throw new GradleScriptException("Enlightenment failed to start")
          if ("true".equals(project.findProperty("screenrecord"))) {
            ("tmux new-session -d -s ColumnalTestRecording" + index + " 'ffmpeg -video_size 1920x1200 -framerate 12 -f x11grab -i :42." + index + " -codec:v libx264 recording-" + subproject.name + ".mp4'").execute()
          }
        }
      }
      doLast {
        if (enlightenment != null)
          enlightenment.destroy()
        if ("true".equals(project.findProperty("screenrecord"))) {
          ("tmux send-keys -t ColumnalTestRecording" + index + " q").execute()
          // Give FFMPEG some time to finish up:
          sleep(20_000);
        }
      }
    }

    processTestResources.dependsOn ':xml:build'
  }

  repositories {
    mavenCentral()
    maven {
      url "https://artifactory.nimblygames.com/artifactory/ng-public-release/"
    }
  }
  tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:unchecked", "-Xlint:deprecation", "-Xlint:module", "-Werror", "-parameters", "--enable-preview"]
    options.encoding = 'UTF-8'
    options.release = 17
    options.fork = true
    options.forkOptions.memoryMaximumSize = "2G"
  }
}
